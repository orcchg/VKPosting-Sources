buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
//        classpath "net.ltgt.gradle:gradle-apt-plugin:0.9"
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.4'
    }
}

repositories {
    mavenCentral()
    jcenter()
    maven {url "https://clojars.org/repo/"}
}

apply plugin: 'com.android.library'
apply plugin: 'com.jakewharton.hugo'
apply plugin: 'com.neenbedankt.android-apt'
//apply plugin: "net.ltgt.apt"

configurations {
    provided
    testOutput
}

sourceSets {
    main {
        compileClasspath += configurations.provided
    }
}

android {
    def globalConfiguration = rootProject.extensions.getByName("ext")

    compileSdkVersion globalConfiguration.getAt("androidCompileSdkVersion")
    buildToolsVersion globalConfiguration.getAt("androidBuildToolsVersion")

    defaultConfig {
        minSdkVersion globalConfiguration.getAt("androidMinSdkVersion")
        targetSdkVersion globalConfiguration.getAt("androidTargetSdkVersion")
        defaultPublishConfig 'release'
        publishNonDefault true

        // see: http://stackoverflow.com/questions/17197636/is-it-possible-to-declare-a-variable-in-gradle-usable-in-java
        buildConfigField "int", "multiUseCaseSleepInterval", "1000"  // to avoid Captcha error, interval in ms
        buildConfigField "int", "limitItemsPerRequest", "20"
        buildConfigField "int", "loadMoreThreshold", "1"
        buildConfigField "boolean", "useOnlyGroupsWhereCanPostFreely", "true"
    }

//    compileOptions {
//        sourceCompatibility JavaVersion.VERSION_1_8
//        targetCompatibility JavaVersion.VERSION_1_8
//    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            debuggable false
//            minifyEnabled true
//            proguardFile "${rootProject.ext.proguardPropertiesPath}/proguard-gson.pro"
//            proguardFile "${rootProject.ext.proguardPropertiesPath}/proguard-project.pro"
//            proguardFile 'proguard-rules.pro'
        }
    }
}

dependencies {
    def domainDependencies = rootProject.ext.domainDependencies
    def domainTestDependencies = rootProject.ext.domainTestDependencies

    apt domainDependencies.autoValue
    apt domainDependencies.autoValueParcel

    compile domainDependencies.gson
    compile domainDependencies.javaxInject
    compile domainDependencies.openCSV
    compile domainDependencies.timber
//    compile domainDependencies.vkontakteSdk  // remote
    compile project(':vksdk_library')  // local sub-module

    provided domainDependencies.autoValue
    provided domainDependencies.javaxAnnotation

    /* Test */
    // ------------------------------------------
//    apt domainTestDependencies.daggerCompiler
//
//    testCompile domainTestDependencies.dagger
    testCompile domainTestDependencies.junit
    testCompile domainTestDependencies.mockito

//    testOutput sourceSets.test.output
}

configurations.testOutput.each {
    println "testOutput: $it"
}
